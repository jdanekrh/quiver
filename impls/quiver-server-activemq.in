#!/usr/bin/env python3
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

import os
import signal
import sys

default_home = os.path.normpath("@quiver_home@")
home = os.environ.get("QUIVER_HOME", default_home)
sys.path.insert(0, os.path.join(home, "python"))

from plano import *
from quiver.common import *

def main():
    enable_logging("warn")

    if which("activemq") is None:
        exit("The 'activemq' command is not on the path")

    if len(ARGS) == 1:
        call("activemq --version", shell=True)
        exit()

    kwargs = parse_keyword_args(ARGS[1:])

    host = kwargs["host"]
    port = kwargs["port"]
    path = kwargs["path"]
    ready_file = kwargs["ready-file"]

    assert host in ("localhost", "127.0.0.1")
    assert port in ("5672", "61616")

    wait_for_server_to_stop()

    # Shell mode required to work around activemq's missing shebang

    call("activemq start", shell=True)

    def signal_handler(signum, frame):
        call("activemq stop", shell=True)
        wait_for_server_to_stop()
        exit()

    signal.signal(signal.SIGTERM, signal_handler)
    wait_for_port(port)

    if ready_file != "-":
        write(ready_file, "ready\n")

    while True:
        sleep(1)

def wait_for_server_to_stop():
    for i in range(10):
        if not server_is_running():
            return

        sleep(1)

    fail("The one already running isn't stopping")

def server_is_running():
    with open(os.devnull, "w") as f:
        return call_for_exit_code("activemq status", shell=True, stdout=f) == 0

try:
    main()
except KeyboardInterrupt:
    pass
