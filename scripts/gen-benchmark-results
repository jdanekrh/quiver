#!/usr/bin/env python3
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

import argparse
import json
import string as _string

from pencil import *
from plano import *

_common_css = """
@import url(https://fonts.googleapis.com/css?family=Roboto:300,400,500);
* {
  margin: 1em 0;
  padding: 0;
  box-sizing: border-box;
}
*:first-child {
  margin-top: 0;
}
*:last-child {
  margin-bottom: 0;
}
html, body {
  margin: 0;
}
body {
  font: 10pt/12.5pt Roboto, sans-serif;
  font-weight: 300;
  padding: 2em;
}
h1 {
  font-weight: 300;
  line-height: 1em;
}
h2 {
  font-weight: 500;
  font-size: 1.2em;
}
a {
  text-decoration: none;
  color: rgba(0, 0, 255, 0.8);
}
table {
  border-collapse: collapse;
  border-spacing: 0;
  font-size: inherit;
  width: 100%;
}
th, td {
  padding: 0.3em 0.6em 0.2em 0;
}
th {
  font-weight: 500;
}
"""

_overview_template = _string.Template("""
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head>
    <title>Quiver Bench $id</title>
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sortable/0.8.0/js/sortable.min.js"></script>
    <script>
      "use strict";
      Sortable.init();
    </script>
    <style type="text/css">
      $common_css
      #results th:nth-child(1n+5), #results td:nth-child(1n+5) {
        text-align: right;
      }
      #results tbody tr:hover {
        background: rgb(255, 255, 127);
      }
      table[data-sortable] th {
        vertical-align: bottom;
      }
      table[data-sortable] th, table[data-sortable] td {
        text-align: left;
      }
      table[data-sortable] th:not([data-sortable="false"]) {
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        -o-user-select: none;
        user-select: none;
        -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
        -webkit-touch-callout: none;
        cursor: pointer;
      }
      table[data-sortable] th:after {
        content: "";
        visibility: hidden;
        display: inline-block;
        vertical-align: inherit;
        height: 0;
        width: 0;
        border-width: 5px;
        border-style: solid;
        border-color: transparent;
        margin-right: 1px;
        margin-left: 10px;
        float: right;
      }
      table[data-sortable] th[data-sorted="true"]:after {
        visibility: visible;
      }
      table[data-sortable] th[data-sorted-direction="descending"]:after {
        border-top-color: inherit;
        margin-top: 8px;
      }
      table[data-sortable] th[data-sorted-direction="ascending"]:after {
        border-bottom-color: inherit;
        margin-top: 3px;
      }
    </style>
  </head>
  <body>
    <h1>Quiver Bench $id</h1>

    <table id="results" data-sortable="data-sortable">
      <thead>
        <tr>
          <th data-sorted="true" data-sorted-direction="ascending">Sender</th>
          <th>Server</th>
          <th>Receiver</th>
          <th>Status</th>
          <th data-sortable-type="numeric">Throughput</th>
          <th data-sortable-type="numeric">Median latency</th>
          <th data-sortable-type="numeric">99.999% latency</th>
        </tr>
      </thead>
      <tbody>
        $rows
      </tbody>
    </table>
  </body>
</html>
""")

_test_template = _string.Template("""
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head>
    <title>$title - Quiver Bench $id</title>
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <style type="text/css">
      $common_css
      h1.subtitle {
        font-size: 1.4em;
        margin: -0.4em 0 1.8em 0;
      }
      pre {
        padding: 1em;
        background-color: rgb(239, 239, 239);
        overflow-x: auto;
        font-size: 0.95em;
      }
    </style>
  </head>
  <body>
    <h1>$title</h1>

    <h1 class="subtitle">Quiver Bench $id</h1>

    <h2>Status</h2>

    <pre>$status</pre>

    <h2>Test command</h2>

    <pre>$test_command</pre>

    <h2>Test output</h2>

    <pre>$test_output</pre>

    <h2>Server command</h2>

    <pre>$server_command</pre>

    <h2>Server output</h2>

    <pre>$server_output</pre>
  </body>
</html>
""")

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("results_dir", metavar="RESULTS-DIR")

    args = parser.parse_args()

    id = args.results_dir

    if id.startswith("quiver-bench-"):
        id = args.results_dir[len("quiver-bench-"):]

    if id.endswith("/"):
        id = id[:-1]

    records = list()

    for sender in list_dir(args.results_dir):
        sender_dir = join(args.results_dir, sender)

        if not is_dir(sender_dir):
            continue

        for server in list_dir(sender_dir):
            server_dir = join(sender_dir, server)

            if server == "none":
                server = "-"

            for receiver in list_dir(server_dir):
                test_dir = join(server_dir, receiver)

                status_file = join(test_dir, "pair", "status.txt")
                summary_file = join(test_dir, "pair", "receiver-summary.json")

                try:
                    status = read(status_file)[:6]
                except:
                    continue

                if status == "PASSED":
                    with open(summary_file, "rb") as f:
                        data = json.load(f)

                    message_rate = data["results"]["message_rate"]
                    latency_median = data["results"]["latency_quartiles"][1]
                    latency_five_nines = data["results"]["latency_nines"][3]

                    if message_rate is None:
                        message_rate = 0

                    record = [
                        xml_escape(sender),
                        xml_escape(server),
                        xml_escape(receiver),
                        html_a(status, join("..", test_dir, "index.html"), target="quiver"),
                        xml_escape("{:,}".format(message_rate)),
                        xml_escape("{:,}".format(latency_median)),
                        xml_escape("{:,}".format(latency_five_nines)),
                    ]
                else:
                    record = [
                        xml_escape(sender),
                        xml_escape(server),
                        xml_escape(receiver),
                        html_a(status, join("..", test_dir, "index.html"), target="quiver"),
                        None,
                        None,
                        None
                    ]

                records.append(record)

                command_file = join(test_dir, "pair", "command.txt")
                output_file = join(test_dir, "pair", "output.txt")
                server_command_file = join(test_dir, "server", "command.txt")
                server_output_file = join(test_dir, "server", "output.txt")

                command = read(command_file)
                output = read(output_file)

                server_command = "none"
                server_output = "none"

                if server == "-":
                    title = "{} &#8594; {}".format(sender, receiver)
                else:
                    title = "{} &#8594; {} &#8594; {}".format(sender, server, receiver)

                    server_command = read(server_command_file)
                    server_output = read(server_output_file)

                page = _test_template.safe_substitute(id=id, title=title, common_css=_common_css, status=status,
                                                      test_command=command, test_output=output,
                                                      server_command=server_command, server_output=server_output)

                write(join(test_dir, "index.html"), page)

    rows = list()

    for record in records:
        fields = list()

        for field in record:
            if field is None:
                field = "-"

            fields.append("<td>{}</td>".format(field))

        rows.append("<tr>{}</tr>".format("".join(fields)))

    rows = "\n".join(rows)

    page = _overview_template.safe_substitute(id=id, common_css=_common_css, rows=rows)

    write(join(args.results_dir, "index.html"), page)

try:
    main()
except KeyboardInterrupt:
    pass
